驼峰命名法 camel case
命名时要更universal一点  例如 binarySearch(int[] ..., int target)
    这里 ... 有几种选择，nums可以，但给人的感觉好像是只有数字能做参数
    而如果命名为 arrays，那给人的感觉就更宽泛

primitive data type：int byte short long，float double boolean char
    基本数据类型，存储在stack中 --- 直接存储

class，object这类数据类型，是存储在heap中的 --- 存储地址
    想调用student中的一个数据，那就要利用到reference 之类的refernece其实就是调用了地址
    假设一个class叫Student，下面有一个 public int no代表学号，假设Student中又一个student1数据，想调用student1的学号，就需要 student1.no

这就说明 array = null的时候，在stack heap结构中的stack里，是有array这个变量的，但是在heap中没有地址，可以直接理解为不存在。
而array.length = 0的时候，在heap中是有地址存在的，只是这个array的长度为0。在stack中也有相对应的一个array与这个地址对应。

那一个疑问就是，array = null和0长度array对于我们来讲本质上没区别，都是没元素。然而对于存储结构来讲，array=null的时候说明这个array啥也没有，
    所以不占用heap。但是array.length=0的array，说明array虽然没有元素，但是一些辅助array存在的，例如array.length数据，是存在的，所以在heap中有存储地址。

array == null || array.length=0 这个条件能不能调换位置？
    答：不能，因为array==null放在后面有可能会造成空指针异常 null pointer exception
    为什么用短路或 ｜｜
    答：短路或只要有一个条件满足就立刻进行该方法。同理，短路与只要有一个条件不满足就立刻停止该条件。
    这也就说明，如果array == null真的成立，那计算机不会再继续检测 array.length == 0这个条件，也就不会造成空指针异常。

mid=(left+right)/2 v.s. mid=left+(right-left)/2
    为什么我们选择    mid=left+(right-left)/2 这是为了防止integer overflow
    因为Integer类的范围是 +-2^32    当然有极端的case，可能会造成 left+right>2^32 导致异常
    所以 mid=left+(right-left)/2 是一个更好的选择


实际上，Binary Search不一定非要完全sorted array，狭义上来讲，sorted array是最好的选择。广义上来讲，只要有连续的类同元素，找分界线就好。
    例如，first bad version，就是在找连续的好，直到遇到坏。这也就说明完全可以用Binary Search去查波峰波谷，或local maximum，local minimum
    甚至sort的元素都可以不是int，可以是任何数据类型，只要我定义了"大"和"小"的概念。假设说我定义c比b大，b比a大
    那  String a, b, c  a,a,a,b,b,b,b,c,c,c,c,c,c,c也可以用binary search找元素